#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DDWA
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Yuliya.Huzarevich")]
	public partial class DС1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDepot(Depot instance);
    partial void UpdateDepot(Depot instance);
    partial void DeleteDepot(Depot instance);
    partial void InsertDrugType(DrugType instance);
    partial void UpdateDrugType(DrugType instance);
    partial void DeleteDrugType(DrugType instance);
    partial void InsertDrugUnit(DrugUnit instance);
    partial void UpdateDrugUnit(DrugUnit instance);
    partial void DeleteDrugUnit(DrugUnit instance);
    #endregion
		
		public DС1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Yuliya_HuzarevichConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DС1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DС1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DС1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DС1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Depot> Depots
		{
			get
			{
				return this.GetTable<Depot>();
			}
		}
		
		public System.Data.Linq.Table<DrugType> DrugTypes
		{
			get
			{
				return this.GetTable<DrugType>();
			}
		}
		
		public System.Data.Linq.Table<DrugUnit> DrugUnits
		{
			get
			{
				return this.GetTable<DrugUnit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Depot")]
	public partial class Depot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepotId;
		
		private string _DepotName;
		
		private System.Nullable<int> _CountryId;
		
		private EntitySet<DrugUnit> _DrugUnits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepotIdChanging(int value);
    partial void OnDepotIdChanged();
    partial void OnDepotNameChanging(string value);
    partial void OnDepotNameChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    #endregion
		
		public Depot()
		{
			this._DrugUnits = new EntitySet<DrugUnit>(new Action<DrugUnit>(this.attach_DrugUnits), new Action<DrugUnit>(this.detach_DrugUnits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DepotId
		{
			get
			{
				return this._DepotId;
			}
			set
			{
				if ((this._DepotId != value))
				{
					this.OnDepotIdChanging(value);
					this.SendPropertyChanging();
					this._DepotId = value;
					this.SendPropertyChanged("DepotId");
					this.OnDepotIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DepotName
		{
			get
			{
				return this._DepotName;
			}
			set
			{
				if ((this._DepotName != value))
				{
					this.OnDepotNameChanging(value);
					this.SendPropertyChanging();
					this._DepotName = value;
					this.SendPropertyChanged("DepotName");
					this.OnDepotNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Depot_DrugUnit", Storage="_DrugUnits", ThisKey="DepotId", OtherKey="DepotId")]
		public EntitySet<DrugUnit> DrugUnits
		{
			get
			{
				return this._DrugUnits;
			}
			set
			{
				this._DrugUnits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DrugUnits(DrugUnit entity)
		{
			this.SendPropertyChanging();
			entity.Depot = this;
		}
		
		private void detach_DrugUnits(DrugUnit entity)
		{
			this.SendPropertyChanging();
			entity.Depot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugType")]
	public partial class DrugType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DrugTypeId;
		
		private string _DrugTypeName;
		
		private double _DrugTypeWeight;
		
		private EntitySet<DrugUnit> _DrugUnits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrugTypeIdChanging(int value);
    partial void OnDrugTypeIdChanged();
    partial void OnDrugTypeNameChanging(string value);
    partial void OnDrugTypeNameChanged();
    partial void OnDrugTypeWeightChanging(double value);
    partial void OnDrugTypeWeightChanged();
    #endregion
		
		public DrugType()
		{
			this._DrugUnits = new EntitySet<DrugUnit>(new Action<DrugUnit>(this.attach_DrugUnits), new Action<DrugUnit>(this.detach_DrugUnits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DrugTypeId
		{
			get
			{
				return this._DrugTypeId;
			}
			set
			{
				if ((this._DrugTypeId != value))
				{
					this.OnDrugTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DrugTypeId = value;
					this.SendPropertyChanged("DrugTypeId");
					this.OnDrugTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DrugTypeName
		{
			get
			{
				return this._DrugTypeName;
			}
			set
			{
				if ((this._DrugTypeName != value))
				{
					this.OnDrugTypeNameChanging(value);
					this.SendPropertyChanging();
					this._DrugTypeName = value;
					this.SendPropertyChanged("DrugTypeName");
					this.OnDrugTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugTypeWeight", DbType="Float NOT NULL")]
		public double DrugTypeWeight
		{
			get
			{
				return this._DrugTypeWeight;
			}
			set
			{
				if ((this._DrugTypeWeight != value))
				{
					this.OnDrugTypeWeightChanging(value);
					this.SendPropertyChanging();
					this._DrugTypeWeight = value;
					this.SendPropertyChanged("DrugTypeWeight");
					this.OnDrugTypeWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugType_DrugUnit", Storage="_DrugUnits", ThisKey="DrugTypeId", OtherKey="DrugTypeId")]
		public EntitySet<DrugUnit> DrugUnits
		{
			get
			{
				return this._DrugUnits;
			}
			set
			{
				this._DrugUnits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DrugUnits(DrugUnit entity)
		{
			this.SendPropertyChanging();
			entity.DrugType = this;
		}
		
		private void detach_DrugUnits(DrugUnit entity)
		{
			this.SendPropertyChanging();
			entity.DrugType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugUnit")]
	public partial class DrugUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DrugUnitId;
		
		private System.Nullable<int> _PickNumber;
		
		private System.Nullable<int> _DepotId;
		
		private int _DrugTypeId;
		
		private bool _Shipped;
		
		private EntityRef<Depot> _Depot;
		
		private EntityRef<DrugType> _DrugType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrugUnitIdChanging(string value);
    partial void OnDrugUnitIdChanged();
    partial void OnPickNumberChanging(System.Nullable<int> value);
    partial void OnPickNumberChanged();
    partial void OnDepotIdChanging(System.Nullable<int> value);
    partial void OnDepotIdChanged();
    partial void OnDrugTypeIdChanging(int value);
    partial void OnDrugTypeIdChanged();
    partial void OnShippedChanging(bool value);
    partial void OnShippedChanged();
    #endregion
		
		public DrugUnit()
		{
			this._Depot = default(EntityRef<Depot>);
			this._DrugType = default(EntityRef<DrugType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugUnitId", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DrugUnitId
		{
			get
			{
				return this._DrugUnitId;
			}
			set
			{
				if ((this._DrugUnitId != value))
				{
					this.OnDrugUnitIdChanging(value);
					this.SendPropertyChanging();
					this._DrugUnitId = value;
					this.SendPropertyChanged("DrugUnitId");
					this.OnDrugUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickNumber", DbType="Int")]
		public System.Nullable<int> PickNumber
		{
			get
			{
				return this._PickNumber;
			}
			set
			{
				if ((this._PickNumber != value))
				{
					this.OnPickNumberChanging(value);
					this.SendPropertyChanging();
					this._PickNumber = value;
					this.SendPropertyChanged("PickNumber");
					this.OnPickNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotId", DbType="Int")]
		public System.Nullable<int> DepotId
		{
			get
			{
				return this._DepotId;
			}
			set
			{
				if ((this._DepotId != value))
				{
					if (this._Depot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepotIdChanging(value);
					this.SendPropertyChanging();
					this._DepotId = value;
					this.SendPropertyChanged("DepotId");
					this.OnDepotIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugTypeId", DbType="Int NOT NULL")]
		public int DrugTypeId
		{
			get
			{
				return this._DrugTypeId;
			}
			set
			{
				if ((this._DrugTypeId != value))
				{
					if (this._DrugType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrugTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DrugTypeId = value;
					this.SendPropertyChanged("DrugTypeId");
					this.OnDrugTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shipped", DbType="Bit NOT NULL")]
		public bool Shipped
		{
			get
			{
				return this._Shipped;
			}
			set
			{
				if ((this._Shipped != value))
				{
					this.OnShippedChanging(value);
					this.SendPropertyChanging();
					this._Shipped = value;
					this.SendPropertyChanged("Shipped");
					this.OnShippedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Depot_DrugUnit", Storage="_Depot", ThisKey="DepotId", OtherKey="DepotId", IsForeignKey=true)]
		public Depot Depot
		{
			get
			{
				return this._Depot.Entity;
			}
			set
			{
				Depot previousValue = this._Depot.Entity;
				if (((previousValue != value) 
							|| (this._Depot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Depot.Entity = null;
						previousValue.DrugUnits.Remove(this);
					}
					this._Depot.Entity = value;
					if ((value != null))
					{
						value.DrugUnits.Add(this);
						this._DepotId = value.DepotId;
					}
					else
					{
						this._DepotId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Depot");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugType_DrugUnit", Storage="_DrugType", ThisKey="DrugTypeId", OtherKey="DrugTypeId", IsForeignKey=true)]
		public DrugType DrugType
		{
			get
			{
				return this._DrugType.Entity;
			}
			set
			{
				DrugType previousValue = this._DrugType.Entity;
				if (((previousValue != value) 
							|| (this._DrugType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DrugType.Entity = null;
						previousValue.DrugUnits.Remove(this);
					}
					this._DrugType.Entity = value;
					if ((value != null))
					{
						value.DrugUnits.Add(this);
						this._DrugTypeId = value.DrugTypeId;
					}
					else
					{
						this._DrugTypeId = default(int);
					}
					this.SendPropertyChanged("DrugType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
